position=position_jitter(width=0.3, height=0)
)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
facet_grid(PCLASS~SURVIVED, labeller=label_both) +
labs(title='Titanic') +
labs(x="SURVIVED", y=paste("FARE")) +
layer(data=df,
mapping=aes(x=SEX, y=as.numeric(as.character(FARE)), color=SEX),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
source('~/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/DrCannata/RWorkshop/03 Grammar of Graphics with R & ggplot2/Titanic Analysis.R')
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from titanic where sex is not null"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_ryl96', PASS='orcl_ryl96', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df
summary(df)
head(df)
require(extrafont)
ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
#facet_wrap(~SURVIVED) +
#facet_grid(.~SURVIVED, labeller=label_both) + # Same as facet_wrap but with a label.
facet_grid(PCLASS~SURVIVED, labeller=label_both) +
labs(title='Titanic') +
labs(x="Age", y=paste("Fare")) +
layer(data=df,
mapping=aes(x=as.numeric(as.character(AGE)), y=as.numeric(as.character(FARE)), color=SEX),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
facet_grid(PCLASS~SURVIVED, labeller=label_both) +
labs(title='Titanic') +
labs(x="SURVIVED", y=paste("FARE")) +
layer(data=df,
mapping=aes(x=SEX, y=as.numeric(as.character(FARE)), color=SEX),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from titanic where sex is not null"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_ryl96', PASS='orcl_ryl96', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df
summary(df)
head(df)
require(extrafont)
ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
facet_wrap(~SURVIVED) +
#facet_grid(.~SURVIVED, labeller=label_both) + # Same as facet_wrap but with a label.
facet_grid(PCLASS~SURVIVED, labeller=label_both) +
labs(title='Titanic') +
labs(x="Age", y=paste("Fare")) +
layer(data=df,
mapping=aes(x=as.numeric(as.character(AGE)), y=as.numeric(as.character(FARE)), color=SEX),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
facet_grid(PCLASS~SURVIVED, labeller=label_both) +
labs(title='Titanic') +
labs(x="SURVIVED", y=paste("FARE")) +
layer(data=df,
mapping=aes(x=SEX, y=as.numeric(as.character(FARE)), color=SEX),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from titanic where sex is not null"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_ryl96', PASS='orcl_ryl96', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df
summary(df)
head(df)
require(extrafont)
ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
#facet_wrap(~SURVIVED) +
#facet_grid(.~SURVIVED, labeller=label_both) + # Same as facet_wrap but with a label.
facet_grid(PCLASS~SURVIVED, labeller=label_both) +
labs(title='Titanic') +
labs(x="Age", y=paste("Fare")) +
layer(data=df,
mapping=aes(x=as.numeric(as.character(AGE)), y=as.numeric(as.character(FARE)), color=SEX),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
source('~/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/DrCannata/RWorkshop/03 Grammar of Graphics with R & ggplot2/Titanic Analysis.R')
source('~/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/DrCannata/RWorkshop/03 Grammar of Graphics with R & ggplot2/Titanic Analysis.R')
source('~/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/DrCannata/RWorkshop/03 Grammar of Graphics with R & ggplot2/Titanic Analysis.R')
source('~/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/DrCannata/RWorkshop/03 Grammar of Graphics with R & ggplot2/Titanic Analysis.R')
source('~/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/DrCannata/.Rprofile.R')
source('~/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/.Rprofile.R')
require(tidyr)
require(dplyr)
require(ggplot2)
tbl_df(diamonds)
View(diamonds)
# select
select(diamonds, cut, clarity) %>% tbl_df # Equivalent SQL: select cut, clarity from diamonds;
diamonds %>% select(cut, clarity) %>% tbl_df
diamonds %>% select(., cut, clarity) %>% tbl_df
# select cut, clarity from diamonds where cut in ('Good', 'Fair');
# select cut, clarity from diamonds where cut = 'Good' or cut = 'Fair';
diamonds %>% select(cut, clarity) %>% filter(cut %in% c("Good", "Fair"), clarity == "VS1") %>% tbl_df
# select cut, clarity from diamonds where (cut = 'Good' or cut = 'Fair') and clarity = 'VS1';
diamonds %>% select(cut, clarity) %>% filter(cut %in% c("Good", "Fair"), clarity == "VS1" | is.na(cut)) %>% tbl_df
c(1,1,2,3,4,3,5) %>% cumsum()
diamonds %>% mutate(cumsum_x = cumsum(x)) %>% tbl_df
c(1,1,2,3,4,3,5) %>% cumprod()
c(1,1,2,3,4,3,5) %>% between(2,4)
diamonds %>% mutate(between_x = between(x,4,4.1)) %>% tbl_df
c(1:5) %>% cummean()
c(1:5) %>% lead() - c(1:5)
diamonds %>% mutate(lead_z = lead(z)-z) %>% tbl_df
c(1:5) %>% lag() - c(1:5)
diamonds %>% mutate(lag_z = lag(z)-z) %>% tbl_df
diamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n())
diamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n()) %>% ungroup %>% summarize(sum(n))
diamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n()) %>% arrange(n)
diamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n()) %>% arrange(desc(n), cut, color)
c(1:10) %>% ntile(4) # bucket edges are rounded
require(tidyr)
require(dplyr)
require(ggplot2)
tbl_df(diamonds)
View(diamonds)
# select
select(diamonds, cut, clarity) %>% tbl_df # Equivalent SQL: select cut, clarity from diamonds;
diamonds %>% select(cut, clarity) %>% tbl_df
diamonds %>% select(., cut, clarity) %>% tbl_df
diamonds %>% select(color:price) %>% tbl_df # Equivalent SQL: none
diamonds %>% select(-cut, -clarity) %>% tbl_df # Equivalent SQL: none
x <- diamonds %>% select(cut, clarity) %>% tbl_df
x
# filter
diamonds %>% select(cut, clarity) %>% filter(cut == "Good") %>% tbl_df # Equivalent SQL: select cut, clarity from diamonds where cut = 'Good';
diamonds %>% select(cut, clarity) %>% filter(cut %in% c("Good", "Fair")) %>% tbl_df # Equivalent SQL: select cut, clarity from diamonds where cut in ('Good', 'Fair');# or Equivalent SQL:  select cut, clarity from diamonds where cut = 'Good' or cut = 'Fair';
diamonds %>% select(cut, clarity) %>% filter(cut %in% c("Good", "Fair"), clarity == "VS1") %>% tbl_df # Equivalent SQL:  select cut, clarity from diamonds where (cut = 'Good' or cut = 'Fair') and clarity = 'VS1';
diamonds %>% select(cut, clarity) %>% filter(cut %in% c("Good", "Fair"), clarity == "VS1" | is.na(cut)) %>% tbl_df # Equivalent SQL:  select cut, clarity from diamonds where ((cut = 'Good' or cut = 'Fair') and clarity = 'VS1') or cut is null;
# diamonds %>% select(cut, clarity) %>% filter(carat > 2) %>% tbl_df # This will give an error
# Equivalent SQL:  select cut, clarity  from diamonds  where carat > 2;
diamonds %>% filter(carat > 2) %>% select(cut, clarity) %>% tbl_df # This does not give an error.
diamonds %>% select(carat, clarity) %>% filter(carat > 2) %>% tbl_df # Equivalent SQL:  select carat, clarity  from diamonds  where carat > 2;
# arrange
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% arrange(desc(x)) %>% tbl_df
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% arrange(desc(x), y) %>% tbl_df
diamonds %>% arrange(carat) %>% tbl_df # Equivalent SQL:  select * from diamonds order by carat;
diamonds %>% arrange(desc(carat)) %>% tbl_df # Equivalent SQL:select * from diamonds order by carat desc;
# rename
diamonds %>% rename(tbl= table) %>% tbl_df # Equivalent: select tbl as "table" from diamonds;
# mutate
diamonds %>% select(cut, clarity, x, y, z) %>% filter(cut %in% c("Good", "Fair"), clarity == "VS1" | is.na(cut)) %>% mutate(sum = x+y+z) %>% tbl_df # Equivalent: select cut, clarity, x+y+z as sum from diamonds where ((cut = 'Good' or cut = 'Fair') and clarity = 'VS1') or cut is null
ndf <- diamonds %>% select(cut, clarity, x, y, z) %>% filter(cut %in% c("Good", "Fair"), clarity == "VS1" | is.na(cut)) %>% mutate(sum = x+y+z) %>% tbl_df
ndf
# Useful mutate functions:
# diamonds$ID<-seq.int(nrow(diamonds)) # Add a sequince number column
# pmin(), pmax() Parallel, Element-wise min and max
# cummin(), cummax() Cumulative min and max
# cumsum(), cumprod() Cumulative sum and product
# Windowing functions
# between() Are values between a and b?
# cume_dist() Cumulative distribution of values
# cumall(), cumany() Cumulative all and any
# cummean() Cumulative mean
# lead(), lag() Copy with values one position
# ntile() Bin vector into n buckets
# dense_rank(), min_rank(),
# percent_rank(), row_number() Various ranking methods
pmin(c(1:5), (5:1)) # Pairwise min
diamonds %>% mutate(minxy = pmin(x,y)) %>% tbl_df
pmax(c(1:5), (5:1)) # Pairwise max
c(1,1,2,0,4,3,5) %>% cummin()
diamonds %>% mutate(cummin_x = cummin(x)) %>% tbl_df
c(1,1,2,5,4,3,5) %>% cummax()
c(1,1,2,3,4,3,5) %>% cumsum()
diamonds %>% mutate(cumsum_x = cumsum(x)) %>% tbl_df
c(1,1,2,3,4,3,5) %>% cumprod()
c(1,1,2,3,4,3,5) %>% between(2,4)
diamonds %>% mutate(between_x = between(x,4,4.1)) %>% tbl_df
c(1:5) %>% cummean()
c(1:5) %>% lead() - c(1:5)
diamonds %>% mutate(lead_z = lead(z)-z) %>% tbl_df
c(1:5) %>% lag() - c(1:5)
diamonds %>% mutate(lag_z = lag(z)-z) %>% tbl_df
c(1:10)
c(1:10) %>% ntile(4) # bucket edges are rounded
diamonds %>% mutate(ntile_z = ntile(z,100)) %>% arrange(desc(ntile_z)) %>% tbl_df
diamonds %>% mutate(ntile_z = ntile(z,100)) %>% group_by(ntile_z) %>% summarise(n=n()) %>% tbl_df
diamonds %>% mutate(price_percent = cume_dist(price)) %>% filter(price_percent <= .20 | price_percent >= .80) %>% ggplot(aes(x = price, y = carat)) + geom_point(aes(color=cut))
require("jsonlite")
require(dplyr)
source('~/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/.Rprofile.R')
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
re(dplyr)
require(ggplot2)
tbl_df(diamonds)
View(diamonds)
# select
select(diamo
diamonds %>% select(cut, clarity) %>% filter(cut == "Good") %>% tbl_df # Equivalent SQL: select cut, clarity from diamonds where cut = 'Good';
diamonds %>% select(cut, clarity) %>% filter(cut %in% c("Good", "Fair")) %>% tbl_df # Equivalent SQL: select cut, clarity from diamonds where cut in ('Good', 'Fair');# or Equivalent SQL:  select cut, clarity from diamonds where cut = 'Good' or cut = 'Fair';
diamonds %>% select(cut, clarity) %>% filter(cut %in% c("Good", "Fair"), clarity == "VS1") %>% tbl_df # Equivalent SQL:  select cut, clarity from diamonds where (cut = 'Good' or cut = 'Fair') and clarity = 'VS1';
diamonds %>% select(cut, clarity) %>% filter(cut %in% c("Good", "Fair"), clarity == "VS1" | is.na(cut)) %>% tbl_df # Equivalent SQL:  select cut, clarity from diamonds where ((cut = 'Good' or cut = 'Fair') and clarity = 'VS1') or cut is null;
# diamonds %>% select(cut, clarity) %>% filter(carat > 2) %>% tbl_df # This will give an error
# Equivalent SQL:  select cut, clarity  from diamonds  where carat > 2;
diamonds %>% filter(carat > 2) %>% select(cut, clarity) %>% tbl_df # This does not give an error.
diamonds %>% select(carat, clarity) %>% filter(carat > 2) %>% tbl_df # Equivalent SQL:  select carat, clarity  from diamonds  where carat > 2;
# arrange
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% arrange(desc(x)) %>% tbl_df
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% arrange(desc(x), y) %>% tbl_df
diamonds %>% arrange(carat) %>% tbl_df # Equivalent SQL:  select * from diamonds order by carat;
diamonds %>% arrange(desc(carat)) %>% tbl_df # Equivalent SQL:select * from diamonds order by carat desc;
# rename
diamonds %>% rename(tbl= table) %>% tbl_df # Equivalent: select tbl as "table" from diamonds;
# mutate
diamonds %>% select(cut, clarity, x, y, z) %>% filter(cut %in% c("Good", "Fair"), clarity == "VS1" | is.na(cut)) %>% mutate(sum = x+y+z) %>% tbl_df # Equivalent: select cut, clarity, x+y+z as sum from diamonds where ((cut = 'Good' or cut = 'Fair') and clarity = 'VS1') or cut is null
ndf <- diamonds %>% select(cut, clarity, x, y, z) %>% filter(cut %in% c("Good", "Fair"), clarity == "VS1" | is.na(cut)) %>% mutate(sum = x+y+z) %>% tbl_df
ndf
# Useful mutate functions:
# diamonds$ID<-seq.int(nrow(diamonds)) # Add a sequince number column
# pmin(), pmax() Parallel, Element-wise min and max
# cummin(), cummax() Cumulative min and max
# cumsum(), cumprod() Cumulative sum and product
# Windowing functions
# between() Are values between a and b?
# cume_dist() Cumulative distribution of values
# cumall(), cumany() Cumulative all and any
# cummean() Cumulative mean
# lead(), lag() Copy with values one position
# ntile() Bin vector into n buckets
# dense_rank(), min_rank(),
# percent_rank(), row_number() Various ranking methods
pmin(1:5, 5:1) # Pairwise min
diamonds %>% mutate(minxy = pmin(x,y)) %>% tbl_df
pmax(1:5, 5:1) # Pairwise max
c(1,1,2,0,4,3,5) %>% cummin()
diamonds %>% mutate(cummin_x = cummin(x)) %>% tbl_df
c(1,1,2,5,4,3,5) %>% cummax()
c(1,1,2,3,4,3,5) %>% cumsum()
diamonds %>% mutate(cumsum_x = cumsum(x)) %>% tbl_df
c(1,1,2,3,4,3,5) %>% cumprod()
c(1,1,2,3,4,3,5) %>% between(2,4)
diamonds %>% mutate(between_x = between(x,4,4.1)) %>% tbl_df
c(1:5) %>% cummean()
c(1:5) %>% lead()
c(1:5) %>% lead() - c(1:5)
diamonds %>% mutate(lead_z = lead(z)-z) %>% tbl_df
c(1:5) %>% lag()
c(1:5) %>% lag() - c(1:5)
diamonds %>% mutate(lag_z = z-lag(z)) %>% tbl_df
c(1:10)
c(1:10) %>% ntile(4) # bucket edges are rounded
diamonds %>% mutate(ntile_z = ntile(z,100)) %>% arrange(desc(ntile_z)) %>% tbl_df
diamonds %>% mutate(ntile_z = ntile(z,100)) %>% group_by(ntile_z) %>% summarise(n=n()) %>% tbl_df
c(1,1,2,5,4,3,5) %>% cume_dist()
c(1:5) %>% cume_dist()
c(1,1:5) %>% cume_dist()
# c(TRUE, TRUE, FALSE, FALSE, TRUE) %>% cumall()
# c(FALSE, TRUE, FALSE, FALSE, TRUE) %>% cumany()
# Now let's try them in the mutate function
diamonds %>% mutate(price_percent = cume_dist(price)) %>% arrange(desc(price_percent)) %>% tbl_df # Equivalent SQL:
# select d.*, cume_dist() OVER (order by price) cume_dist from diamonds d order by 11 desc;
# select d.*, cume_dist() OVER (PARTITION BY cut order by price) cume_dist from (select * from diamonds where rownum < 100) d order by cut desc, 11 desc;
# Can also try rank(), last_value, nth_value
bottom20_diamonds <- diamonds %>% mutate(price_percent = cume_dist(price)) %>% filter(price_percent <= .20) %>% arrange(desc(price_percent)) %>% tbl_df
diamonds %>% mutate(price_percent = cume_dist(price)) %>% filter(price_percent >= .80) %>% arrange(desc(price_percent)) %>% tbl_df
top20_diamonds <- diamonds %>% mutate(price_percent = cume_dist(price)) %>% filter(price_percent >= .80) %>% arrange(desc(price_percent)) %>% tbl_df
diamonds %>% mutate(price_percent = cume_dist(price)) %>% filter(price_percent <= .20 | price_percent >= .80) %>% ggplot(aes(x = price, y = carat, color = cut)) + geom_point()
# summarize (summarise)
diamonds %>% summarize(max_price = max(price)) # Equivalent SQL:select max(price) as max_price from diamonds;
diamonds %>% summarize(mean = mean(x), sum = sum(x,y,z), n = n()) # Equivalent SQL:select avg(x) as avg, sum(x)+sum(y)+sum(z) as sum, count(*) as n from diamonds;
# Useful Summary functions:
# min(), max() Minimum and maximum values
# mean() Mean value
# median() Median value
# sum() Sum of values
# var, sd() Variance and standard deviation of a vector
# first() First value in a vector
# last() Last value in a vector
# nth() Nth value in a vector
# n() The number of values in a vector
# n_distinct() The number of distinct values in a vector
# group_by
d <- diamonds %>% group_by(cut,color) %>% summarise(n = n()) %>% arrange(n) %>% tbl_df # Equivalent SQL: select cut, color, count(*) n from diamonds group by cut, color order by n;
diamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n())
diamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n()) %>% ungroup %>% summarize(sum(n))
diamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n()) %>% arrange(n)
diamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n()) %>% arrange(desc(n), cut, color)
diamonds %>% group_by(cut, color, clarity) %>% summarise(mean_carat = mean(carat)) %>% ggplot(aes(x=cut, y=mean_carat, color=color)) + geom_point() + facet_wrap(~clarity)
source('~/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/.Rprofile.R')
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from white_red_wine"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_ryl96', PASS='orcl_ryl96', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df
summary(df)
head(df)
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from red_white_wine"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_ryl96', PASS='orcl_ryl96', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df
summary(df)
head(df)
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from red_white_wine"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_ryl96', PASS='orcl_ryl96', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from red_white_wine"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_ryl96', PASS='orcl_ryl96', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from RED_WHITE_WINE"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_ryl96', PASS='orcl_ryl96', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df
summary(df)
head(df)
df %>% ggplot(aes(x=ALCOHOL, y=DENSITY, color=QUALITY)) + geom_point() + scale_colour_gradientn(colours = rainbow(7))
df %>% filter(DENSITY <= 1.05) %>% ggplot(aes(x=ALCOHOL, y=DENSITY, color=QUALITY)) + geom_point() + scale_colour_gradientn(colours = rainbow(7))
df %>% filter(DENSITY <= 1.01) %>% ggplot(aes(x=ALCOHOL, y=DENSITY, color=QUALITY)) + geom_point() + scale_colour_gradientn(colours = rainbow(7))
df %>% filter(DENSITY <= 1.01) %>% ggplot(aes(x=ALCOHOL, y=DENSITY, color=QUALITY)) + geom_point() + geom_bar(stat="identity")
df %>% filter(DENSITY <= 1.01) %>% ggplot(aes(x=ALCOHOL, y=DENSITY, color=QUALITY)) + geom_point() + geom_bar(stat="identity") + scale_colour_gradientn(colours = rainbow(7))
df %>% filter(DENSITY <= 1.01) %>% ggplot(aes(x=ALCOHOL, y=DENSITY, color=QUALITY)) + geom_point() + scale_colour_gradientn(colours = rainbow(7))
df %>% filter(DENSITY <= 1.01) %>% ggplot(aes(x=ALCOHOL, y=DENSITY, color=QUALITY)) + geom_boxplot() + scale_colour_gradientn(colours = rainbow(7))
df %>% filter(DENSITY <= 1.01) %>% ggplot(aes(x=QUALITY, y=DENSITY)) + geom_boxplot() + scale_colour_gradientn(colours = rainbow(7))
require(extrafont)
df %>% filter(DENSITY <= 1.01) %>% ggplot(aes(x=QUALITY, y=DENSITY)) + geom_boxplot()
df %>% filter(DENSITY <= 1.01) %>% ggplot(aes(x=QUALITY, y=DENSITY, color=QUALITY)) + geom_boxplot()
df %>% ggplot(aes(x=QUALITY, y=DENSITY) + geom_boxplot()
df %>% ggplot(aes(x=QUALITY, y=DENSITY)) + geom_boxplot()
df %>% ggplot(aes(x=QUALITY, y=DENSITY)) + geom_boxplot()
df %>% ggplot(aes(x=QUALITY, y=DENSITY)) + geom_boxplot() + geom_jitter()
df %>% ggplot(aes(x=QUALITY, y=DENSITY)) + geom_boxplot(aes(colour=factor(QUALITY)), fill=NA) + geom_point(aes(color = factor(QUALITY))) + scale_x_continuous(breaks = c(3,4,5,6,7,8,9))
df %>% ggplot(aes(x=QUALITY, y=PH)) + geom_boxplot(aes(colour=factor(QUALITY)), fill=NA) + geom_point(aes(color = factor(QUALITY))) + scale_x_continuous(breaks = c(3,4,5,6,7,8,9))
df %>% ggplot(aes(x=QUALITY, y=PH)) + geom_boxplot(aes(colour=factor(QUALITY)), fill=NA) + geom_point(aes(color = factor(QUALITY))) + scale_x_continuous(breaks = c(3,4,5,6,7,8,9)) + geom_jitter()
df %>% ggplot(aes(x=QUALITY, y=PH)) + geom_boxplot(aes(colour=factor(QUALITY)), fill=NA) + geom_point(aes(color = factor(QUALITY))) + scale_x_continuous(breaks = c(3,4,5,6,7,8,9)) + geom_jitter(aes(color(QUALITY))
df %>% ggplot(aes(x=QUALITY, y=PH)) + geom_boxplot(aes(colour=factor(QUALITY)), fill=NA) + geom_point(aes(color = factor(QUALITY))) + scale_x_continuous(breaks = c(3,4,5,6,7,8,9)) + geom_jitter(aes(color(QUALITY))
df %>% ggplot(aes(x=QUALITY, y=PH)) + geom_boxplot(aes(colour=factor(QUALITY)), fill=NA) + geom_point(aes(color = factor(QUALITY))) + scale_x_continuous(breaks = c(3,4,5,6,7,8,9))
df %>% ggplot(aes(x=QUALITY, y=RESIDUAL_SUGAR)) + geom_boxplot(aes(colour=factor(QUALITY)), fill=NA) + geom_point(aes(color = factor(QUALITY))) + scale_x_continuous(breaks = c(3,4,5,6,7,8,9))
df %>% ggplot(aes(x=QUALITY, y=SULPHATES)) + geom_boxplot(aes(colour=factor(QUALITY)), fill=NA) + geom_point(aes(color = factor(QUALITY))) + scale_x_continuous(breaks = c(3,4,5,6,7,8,9))
df %>% ggplot(aes(x=QUALITY, y=SULPHATES)) + geom_boxplot(aes(colour=factor(QUALITY)), fill=NA) + geom_point(aes(color = factor(QUALITY))) + scale_x_continuous(breaks = c(3,4,5,6,7,8,9)) + geom_jitter(aes(color=factor(QUALITY)))
df %>% ggplot(aes(x=QUALITY, y=SULPHATES)) + geom_boxplot(aes(colour=factor(QUALITY),col=grey), fill=NA) + geom_point(aes(color = factor(QUALITY))) + scale_x_continuous(breaks = c(3,4,5,6,7,8,9)) + geom_jitter(aes(color=factor(QUALITY)))
df %>% ggplot(aes(x=QUALITY, y=SULPHATES)) + geom_boxplot(aes(colour=factor(QUALITY)), fill=NA) + geom_point(aes(color = factor(QUALITY))) + scale_x_continuous(breaks = c(3,4,5,6,7,8,9)) + geom_jitter(aes(color=factor(QUALITY)))
head(df)
df %>% ggplot(aes(x=QUALITY, y=SULPHATES)) + geom_boxplot(aes(colour=factor(QUALITY)), fill=NA) + geom_point(aes(color = factor(QUALITY))) + scale_x_continuous(breaks = c(3,4,5,6,7,8,9)) + geom_jitter(aes(color=factor(QUALITY)))
df %>% filter(DENSITY <= 1.01) %>% ggplot(aes(x=ALCOHOL, y=DENSITY, color=QUALITY)) + geom_point() + scale_colour_gradientn(colours = rainbow(7))
df %>% filter(COLOR == white | DENSITY <= 1.01) %>% ggplot(aes(x=ALCOHOL, y=DENSITY, color=QUALITY)) + geom_point() + scale_colour_gradientn(colours = rainbow(7))
df %>% filter(COLOR == WHITE | DENSITY <= 1.01) %>% ggplot(aes(x=ALCOHOL, y=DENSITY, color=QUALITY)) + geom_point() + scale_colour_gradientn(colours = rainbow(7))
df %>% filter(COLOR == white | DENSITY <= 1.01) %>% ggplot(aes(x=ALCOHOL, y=DENSITY, color=QUALITY)) + geom_point() + scale_colour_gradientn(colours = rainbow(7))
df %>% filter(COLOR == "white" | DENSITY <= 1.01) %>% ggplot(aes(x=ALCOHOL, y=DENSITY, color=QUALITY)) + geom_point() + scale_colour_gradientn(colours = rainbow(7))
df %>% filter(COLOR == "white" & DENSITY <= 1.01) %>% ggplot(aes(x=ALCOHOL, y=DENSITY, color=QUALITY)) + geom_point() + scale_colour_gradientn(colours = rainbow(7))
source('~/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/.Rprofile.R')
source('~/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/.Rprofile.R')
require("ggplot2")
require("ggthemes")
require("gplots")
require("grid")
require("RCurl")
require("reshape2")
require("rstudio")
require("tableplot")
require("tidyr")
require("dplyr")
require("jsonlite")
require("extrafont")
require("lubridate")
source('~/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/.Rprofile.R')
("jsonlite")
("jsonlite")
("jsonlite")
("jsonlite")
require("jsonlite")
require("RCurl")
require(dplyr)
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View(emp)
dept <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from dept"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View(dept)
dplyr::inner_join(emp, dept, by="DEPTNO") %>% View
View(emp)
View(dept)
dplyr::left_join(emp, dept, by="DEPTNO") %>% View
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
dplyr::inner_join(emp, dept, by="DEPTNO") %>% View
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
df
dplyr::inner_join(emp, dept, by="DEPTNO") %>% View
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"select *
require("jsonlite")
require("RCurl")
require(dplyr)
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View(emp)
dept <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from dept"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View(dept)
dplyr::inner_join(emp, dept, by="DEPTNO") %>% View
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"select *
from emp e join dept d
on e.deptno = d.deptno"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE))); tbl_df(df)
df
oneDept <- dept %>% filter(DEPTNO == 10)
dplyr::semi_join(emp, oneDept, by="DEPTNO") %>% tbl_df
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"SELECT *
FROM emp e
WHERE EXISTS
(SELECT 1
FROM   dept d
WHERE  e.deptno = 10)
ORDER BY deptno;"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE))); tbl_df(df)
dplyr::anti_join(emp, oneDept, by="DEPTNO") %>% View
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
dplyr::inner_join(emp, dept, by="DEPTNO") %>% View
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"select *
from emp e join dept d
on e.deptno = d.deptno"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE))); tbl_df(df)
source('~/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/.Rprofile.R')
require("jsonlite")
require("RCurl")
require(dplyr)
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from emp"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View(emp)
dept <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from dept"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View(dept)
dplyr::inner_join(emp, dept, by="DEPTNO") %>% View
source('~/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/.Rprofile.R')
require("ggplot2")
require("ggthemes")
require("gplots")
require("grid")
require("RCurl")
require("reshape2")
require("rstudio")
require("tableplot")
require("tidyr")
require("dplyr")
require("jsonlite")
require("extrafont")
require("lubridate")
source('~/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/.Rprofile.R')
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("./")
file_path <- "chefmozaccepts.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
source('~/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/.Rprofile.R')
require(tidyr)
require(dplyr)
require(ggplot2)
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("C:/Users/ronly_000/Documents/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/DV_RProject3/01 Data")
file_path <- "geoplaces2.csv"
df <- read.csv(file_path)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
names(df) <- gsub("name", "restaurant_name", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("placeID", "latitude", "longitude", "zip")
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
source('~/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/DV_RProject3/01 Data/restaurant_ETL.R')
